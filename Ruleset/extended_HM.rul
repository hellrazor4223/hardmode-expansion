##BEGIN SCRIPTS

extended:
#BEGIN TAGS
  tags:
    BattleUnit:
      LAST_HIT_FRAME: int
      AUTO_DEATH: int
      DEATH_COUNTUP: int
    RuleItem:
      TIMER: int
      SELL_PRICE_BE: int
      SELL_PRICE_VG: int
#END TAGS

  scripts:
#BEGIN HIT RED FLASH AND ZOMBIFICATION AFTER ARMOR PENETRATION
    damageUnit:
      - offset: 1
        code: |
          var int temp;
          battle_game.getAnimFrame temp;
          unit.setTag Tag.LAST_HIT_FRAME temp;
          # Global fix to Transformation attacks like Chryssalid zombification
          # Requires at least 1 hit point of damage before zombification triggers
          # This applies to *every* weapon that zombifies.  It *has* to get through armor to work.
          if gt to_transform 0;
            if eq to_health 0;
              set to_transform 0;
            end;
          end;
          return;

    recolorUnitSprite:
      - offset: 2
        code: |
          var int temp;
          
          unit.getTag temp Tag.LAST_HIT_FRAME;
          if neq temp 0;
            sub temp anim_frame;
            if gt temp -3; #only 3 frames after hit have changed color
              set_color new_pixel 2; #red color
            end;
          end;
          
          return new_pixel;
#END HIT RED FLASH AND ZOMBIFICATION AFTER ARMOR PENETRATION

#BEGIN ADJUSTED SELL PRICE BY DIFFICULTY
    sellCostItem:
      - offset: 3
        code: |
          var int temp;
          geoscape_game.difficultyLevel temp;  # get difficulty
          if eq temp DIFF_BEGINNER;
            item_rule.getTag temp Tag.SELL_PRICE_BE;  # custom item sell price
          if eq temp DIFF_EXPERIENCED;
            item_rule.getTag temp Tag.SELL_PRICE_BE;  # custom item sell price
          if eq temp DIFF_VETERAN;
            item_rule.getTag temp Tag.SELL_PRICE_VG;  # custom item sell price
          if eq temp DIFF_GENIUS;
            item_rule.getTag temp Tag.SELL_PRICE_VG;  # custom item sell price
            if neq temp 0;
              set cost_current temp;
            end;
          end;

          return cost_current;
#END ADJUSTED SELL PRICE BY DIFFICULTY

items:
#BEGIN ADJUST SELL PRICE TAGS BY DIFFICULTY
#FACTORS: BE: 1,786 VG: 1,282 TO SH (50% VANILLA)
  - type: STR_PLASMA_BLADE
    tags:
      SELL_PRICE_BE: 32148
      SELL_PRICE_VG: 23076
  - type: STR_PLASMA_SWORD
    tags:
      SELL_PRICE_BE: 44650
      SELL_PRICE_VG: 32050
  - type: STR_PLASMA_PISTOL
    tags:
      SELL_PRICE_BE: 75012
      SELL_PRICE_VG: 53844
  - type: STR_PLASMA_PISTOL_CLIP
    tags:
      SELL_PRICE_BE: 3965
      SELL_PRICE_VG: 2846
  - type: STR_PLASMA_PISTOL_ELERIUM_CLIP
    tags:
      SELL_PRICE_BE: 5983
      SELL_PRICE_VG: 4295
  - type: STR_PLASMA_RIFLE
    tags:
      SELL_PRICE_BE: 112965
      SELL_PRICE_VG: 81087
  - type: STR_PLASMA_RIFLE_CLIP
    tags:
      SELL_PRICE_BE: 5617
      SELL_PRICE_VG: 4032
  - type: STR_PLASMA_RIFLE_ELERIUM_CLIP
    tags:
      SELL_PRICE_BE: 8426
      SELL_PRICE_VG: 6049
#END ADJUST SELL PRICE TAGS BY DIFFICULTY

#BEGIN CELATID EMBRYO SCRIPT
  - &STR_CELATID_EMBRYO
    type: STR_CELATID_EMBRYO
    scripts:
      createItem: |
        var int timer;
        var ptr RuleItem itemRuleset;
        item.getRuleItem itemRuleset;
        itemRuleset.getTag timer Tag.TIMER;
        item.setFuseTimer timer;
        return;
      newTurnItem: |
        var ptre BattleUnit itemOwner;
        var int timer;
        item.getOwner itemOwner;
        #EMBRYO on floor needs to be unprimed
        if eq itemOwner null;
          item.setFuseTimer -1;
        end;
        #THE COST OF CLONING
        item.getFuseTimer timer;
        if eq timer 0;
          itemOwner.setTimeUnits 0;
        end;
        return;
  - type: STR_CELATID_EMBRYO1
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 13
  - type: STR_CELATID_EMBRYO2
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 27
  - type: STR_CELATID_EMBRYO3
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 41
  - type: STR_CELATID_EMBRYO4
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 55
  - type: STR_CELATID_EMBRYO5
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 69
  - type: STR_CELATID_EMBRYO6
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 83
  - type: STR_CELATID_EMBRYO7
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 97
  - type: STR_CELATID_EMBRYO8
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 111
  - type: STR_CELATID_EMBRYO9
    refNode: *STR_CELATID_EMBRYO
    tags:
      TIMER: 125
#END CELATID EMBRYO SCRIPT

#BEGIN SELF POPPING CHRYSSALIDS
armors:
  - update: ZOMBIE_ARMOR
    scripts:
      createUnit: |
        var int auto_death;
        battle_game.randomRange auto_death 3 7;
        unit.setTag Tag.AUTO_DEATH auto_death;
        return;
      newTurnUnit: |
        var int auto_death;
        unit.getTag auto_death Tag.AUTO_DEATH;
        if gt auto_death 0;
          var int death_countup;
          unit.getTag death_countup Tag.DEATH_COUNTUP;
          if eq side FACTION_HOSTILE;
            add death_countup 1;
            unit.setTag Tag.DEATH_COUNTUP death_countup;
          else and eq side FACTION_PLAYER ge death_countup auto_death;
            unit.setHealth 0;
          end;
        end;
        return;
#END SELF POPPING CHRYSSALIDS

#BEGIN SELF POPPING CHRYSSALIDS SPITTERS
armors:
  - update: SPITTER_ZOMBIE_ARMOR
    scripts:
      createUnit: |
        var int auto_death;
        battle_game.randomRange auto_death 3 7;
        unit.setTag Tag.AUTO_DEATH auto_death;
        return;
      newTurnUnit: |
        var int auto_death;
        unit.getTag auto_death Tag.AUTO_DEATH;
        if gt auto_death 0;
          var int death_countup;
          unit.getTag death_countup Tag.DEATH_COUNTUP;
          if eq side FACTION_HOSTILE;
            add death_countup 1;
            unit.setTag Tag.DEATH_COUNTUP death_countup;
          else and eq side FACTION_PLAYER ge death_countup auto_death;
            unit.setHealth 0;
          end;
        end;
        return;
#END SELF POPPING CHRYSSALIDS SPITTERS
##END SCRIPTS
